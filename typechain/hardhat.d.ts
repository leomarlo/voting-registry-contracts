/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BareVotingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BareVotingContract__factory>;
    getContractFactory(
      name: "VotingWithImplementing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingWithImplementing__factory>;
    getContractFactory(
      name: "ICallerGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICallerGetter__factory>;
    getContractFactory(
      name: "IEncodeDuration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEncodeDuration__factory>;
    getContractFactory(
      name: "IEncodeDurationAndTokenweighting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEncodeDurationAndTokenweighting__factory>;
    getContractFactory(
      name: "IEncodeDurationTokenweightingAndQuorum",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEncodeDurationTokenweightingAndQuorum__factory>;
    getContractFactory(
      name: "IGetCallbackData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGetCallbackData__factory>;
    getContractFactory(
      name: "IGetCallbackHash",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGetCallbackHash__factory>;
    getContractFactory(
      name: "IHasAlreadyVoted",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasAlreadyVoted__factory>;
    getContractFactory(
      name: "IImplementingPermitted",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImplementingPermitted__factory>;
    getContractFactory(
      name: "IImplementResult",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IImplementResult__factory>;
    getContractFactory(
      name: "IStatusGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStatusGetter__factory>;
    getContractFactory(
      name: "IVotingPermitted",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingPermitted__factory>;
    getContractFactory(
      name: "CallbackDataGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallbackDataGetter__factory>;
    getContractFactory(
      name: "CallbackHashGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallbackHashGetter__factory>;
    getContractFactory(
      name: "CallerGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CallerGetter__factory>;
    getContractFactory(
      name: "CheckCalldataValidity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CheckCalldataValidity__factory>;
    getContractFactory(
      name: "Deadline",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deadline__factory>;
    getContractFactory(
      name: "ImplementingPermittedPublicly",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImplementingPermittedPublicly__factory>;
    getContractFactory(
      name: "ImplementResult",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImplementResult__factory>;
    getContractFactory(
      name: "ImplementResultFromFingerprint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImplementResultFromFingerprint__factory>;
    getContractFactory(
      name: "NoDoubleVoting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoDoubleVoting__factory>;
    getContractFactory(
      name: "NoDoubleVotingPublic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NoDoubleVotingPublic__factory>;
    getContractFactory(
      name: "StatusGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StatusGetter__factory>;
    getContractFactory(
      name: "Counter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Counter__factory>;
    getContractFactory(
      name: "ImplementMajorityVote",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ImplementMajorityVote__factory>;
    getContractFactory(
      name: "Snapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Snapshot__factory>;
    getContractFactory(
      name: "IRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistrar__factory>;
    getContractFactory(
      name: "IRegistrarPrimitive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistrarPrimitive__factory>;
    getContractFactory(
      name: "Registrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registrar__factory>;
    getContractFactory(
      name: "RegistrarPrimitive",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RegistrarPrimitive__factory>;
    getContractFactory(
      name: "IVotingRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingRegistry__factory>;
    getContractFactory(
      name: "VotingRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingRegistry__factory>;
    getContractFactory(
      name: "IsImplementerResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsImplementerResolver__factory>;
    getContractFactory(
      name: "IsProxyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsProxyResolver__factory>;
    getContractFactory(
      name: "MethodsResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MethodsResolver__factory>;
    getContractFactory(
      name: "RequiredDirectCallResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RequiredDirectCallResolver__factory>;
    getContractFactory(
      name: "UsageResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UsageResolver__factory>;
    getContractFactory(
      name: "IVotingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingContract__factory>;

    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BareVotingContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BareVotingContract>;
    getContractAt(
      name: "VotingWithImplementing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingWithImplementing>;
    getContractAt(
      name: "ICallerGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICallerGetter>;
    getContractAt(
      name: "IEncodeDuration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEncodeDuration>;
    getContractAt(
      name: "IEncodeDurationAndTokenweighting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEncodeDurationAndTokenweighting>;
    getContractAt(
      name: "IEncodeDurationTokenweightingAndQuorum",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEncodeDurationTokenweightingAndQuorum>;
    getContractAt(
      name: "IGetCallbackData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGetCallbackData>;
    getContractAt(
      name: "IGetCallbackHash",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGetCallbackHash>;
    getContractAt(
      name: "IHasAlreadyVoted",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasAlreadyVoted>;
    getContractAt(
      name: "IImplementingPermitted",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IImplementingPermitted>;
    getContractAt(
      name: "IImplementResult",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IImplementResult>;
    getContractAt(
      name: "IStatusGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStatusGetter>;
    getContractAt(
      name: "IVotingPermitted",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingPermitted>;
    getContractAt(
      name: "CallbackDataGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallbackDataGetter>;
    getContractAt(
      name: "CallbackHashGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallbackHashGetter>;
    getContractAt(
      name: "CallerGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CallerGetter>;
    getContractAt(
      name: "CheckCalldataValidity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CheckCalldataValidity>;
    getContractAt(
      name: "Deadline",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Deadline>;
    getContractAt(
      name: "ImplementingPermittedPublicly",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImplementingPermittedPublicly>;
    getContractAt(
      name: "ImplementResult",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImplementResult>;
    getContractAt(
      name: "ImplementResultFromFingerprint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImplementResultFromFingerprint>;
    getContractAt(
      name: "NoDoubleVoting",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoDoubleVoting>;
    getContractAt(
      name: "NoDoubleVotingPublic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NoDoubleVotingPublic>;
    getContractAt(
      name: "StatusGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StatusGetter>;
    getContractAt(
      name: "Counter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Counter>;
    getContractAt(
      name: "ImplementMajorityVote",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ImplementMajorityVote>;
    getContractAt(
      name: "Snapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Snapshot>;
    getContractAt(
      name: "IRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistrar>;
    getContractAt(
      name: "IRegistrarPrimitive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistrarPrimitive>;
    getContractAt(
      name: "Registrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Registrar>;
    getContractAt(
      name: "RegistrarPrimitive",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RegistrarPrimitive>;
    getContractAt(
      name: "IVotingRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingRegistry>;
    getContractAt(
      name: "VotingRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingRegistry>;
    getContractAt(
      name: "IsImplementerResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsImplementerResolver>;
    getContractAt(
      name: "IsProxyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsProxyResolver>;
    getContractAt(
      name: "MethodsResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MethodsResolver>;
    getContractAt(
      name: "RequiredDirectCallResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RequiredDirectCallResolver>;
    getContractAt(
      name: "UsageResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UsageResolver>;
    getContractAt(
      name: "IVotingContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingContract>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
